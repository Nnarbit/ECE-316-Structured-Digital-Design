library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_signed.all;
use ieee.numeric_std.all;

entity BCD is
  
  generic(N: positive := 20; -- size of binary input
          numDigits: positive := 7); -- resulting number of digits in decimal (IE: 2^N = 2^20 = 1048575 =7 digits)

	port ( Din: in STD_LOGIC_VECTOR(N-1 downto 0); 
		Dout: out STD_LOGIC_VECTOR((numDigits * 4)-1 downto 0); 
		overflow: out std_logic);
    
end BCD;

Architecture struct of BCD is 

  /*
  function count_digits(input_vector : std_logic_vector) return integer is
    variable input_int : integer;
    variable digits : integer := 0;
    begin
    input_int := to_integer(unsigned(input_vector));
    
    while input_int > 0 loop
      digits := digits + 1;
      input_int := input_int / 10;
    end loop;
  
    return digits;
  end function;
  */

  begin

  Process(Din)

    --initializes all bits of temp with 0 using the aggregate funciton 'others'
    variable temp : STD_LOGIC_VECTOR(N-1 downto 0) := ((others => '0') );
    --variable numDigits : integer := 0;
    variable a, b  : integer;
 
    begin
    
    if(Din > 999999) then
      overflow <= '1';
    else 
      overflow <= '0';
    end if;
  
    --temp := not temp;
    --numDigits := count_digits(temp);
    --temp := not temp;

    for i in N-1 downto 0 loop

      temp := temp(N-2 downto 0) & Din(i);
      
      for j in 0 to numDigits loop
        a := 3; b := 0;

        if(unsigned(temp(a downto b)) > 4) then
          temp(a downto b) := std_logic_vector(unsigned(temp(a downto b)) + 3);
        end if;

        a := a + 4; 
        b := b + 4;
        
      end loop;

    end loop;

      a := 3; b := 0;
      for k in 0 to numDigits loop

        Dout(a downto b) <= temp(a downto b);

        a := a + 4; 
        b := b + 4;
        
      end loop;

  end process;

end struct;


